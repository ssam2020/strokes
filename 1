import sys
import cv2
import numpy as np
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, 
                            QHBoxLayout, QPushButton, QFileDialog, QLabel,
                            QSlider, QStyle, QMessageBox)
from PyQt5.QtCore import Qt, QTimer, QRect
from PyQt5.QtGui import QPixmap, QImage, QPainter, QPen

class VideoConverter(QMainWindow):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Video to PNG Converter")
        self.setGeometry(100, 100, 800, 600)
        
        # Video state
        self.cap = None
        self.playing = False
        self.start_frame = 0
        self.end_frame = 0
        self.current_frame = 0
        self.crop_rect = QRect()
        self.drawing = False
        
        # UI Setup
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # File selection
        self.btn_open = QPushButton("Open Video")
        self.btn_open.clicked.connect(self.open_file)
        layout.addWidget(self.btn_open)
        
        # Video display
        self.video_label = QLabel()
        self.video_label.setAlignment(Qt.AlignCenter)
        self.video_label.mousePressEvent = self.mouse_press
        self.video_label.mouseMoveEvent = self.mouse_move
        self.video_label.mouseReleaseEvent = self.mouse_release
        layout.addWidget(self.video_label)
        
        # Playback controls
        control_layout = QHBoxLayout()
        self.btn_play = QPushButton()
        self.btn_play.setIcon(self.style().standardIcon(QStyle.SP_MediaPlay))
        self.btn_play.clicked.connect(self.toggle_playback)
        control_layout.addWidget(self.btn_play)
        
        self.slider = QSlider(Qt.Horizontal)
        self.slider.sliderMoved.connect(self.set_position)
        control_layout.addWidget(self.slider)
        layout.addLayout(control_layout)
        
        # Range selection
        range_layout = QHBoxLayout()
        self.start_slider = QSlider(Qt.Horizontal)
        self.start_slider.setStyleSheet("QSlider::handle:horizontal { background: red; }")
        self.start_slider.sliderMoved.connect(self.update_start)
        range_layout.addWidget(self.start_slider)
        
        self.end_slider = QSlider(Qt.Horizontal)
        self.end_slider.setStyleSheet("QSlider::handle:horizontal { background: blue; }")
        self.end_slider.sliderMoved.connect(self.update_end)
        range_layout.addWidget(self.end_slider)
        layout.addLayout(range_layout)
        
        # Conversion controls
        self.btn_convert = QPushButton("Convert to PNG")
        self.btn_convert.clicked.connect(self.convert_video)
        layout.addWidget(self.btn_convert)
        
        # Timer for video playback
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_frame)
        
    def open_file(self):
        path, _ = QFileDialog.getOpenFileName(self, "Open Video", "", "MP4 Files (*.mp4)")
        if path:
            self.cap = cv2.VideoCapture(path)
            if not self.cap.isOpened():
                QMessageBox.critical(self, "Error", "Could not open video file")
                return
                
            self.total_frames = int(self.cap.get(cv2.CAP_PROP_FRAME_COUNT))
            self.slider.setMaximum(self.total_frames)
            self.start_slider.setMaximum(self.total_frames)
            self.end_slider.setMaximum(self.total_frames)
            self.end_slider.setValue(self.total_frames)
            self.start_frame = 0
            self.end_frame = self.total_frames
            self.show_frame(0)
            
    def show_frame(self, frame_num):
        if self.cap:
            self.cap.set(cv2.CAP_PROP_POS_FRAMES, frame_num)
            ret, frame = self.cap.read()
            if ret:
                frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                h, w, ch = frame.shape
                bytes_per_line = ch * w
                q_img = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)
                pixmap = QPixmap.fromImage(q_img)
                
                # Draw crop rectangle
                if not self.crop_rect.isNull():
                    painter = QPainter(pixmap)
                    painter.setPen(QPen(Qt.red, 2, Qt.DashLine))
                    painter.drawRect(self.crop_rect)
                    painter.end()
                
                self.video_label.setPixmap(pixmap.scaled(self.video_label.size(), 
                                                       Qt.KeepAspectRatio))
                
    def toggle_playback(self):
        self.playing = not self.playing
        self.btn_play.setIcon(self.style().standardIcon(
            QStyle.SP_MediaPlay if not self.playing else QStyle.SP_MediaPause))
        if self.playing:
            self.timer.start(30)
        else:
            self.timer.stop()
            
    def update_frame(self):
        if self.current_frame < self.end_frame:
            self.current_frame += 1
            self.slider.setValue(self.current_frame)
            self.show_frame(self.current_frame)
        else:
            self.toggle_playback()
            
    def set_position(self, position):
        self.current_frame = position
        self.show_frame(position)
        
    def update_start(self, position):
        self.start_frame = min(position, self.end_frame-1)
        self.start_slider.setValue(self.start_frame)
        
    def update_end(self, position):
        self.end_frame = max(position, self.start_frame+1)
        self.end_slider.setValue(self.end_frame)
        
    def mouse_press(self, event):
        self.drawing = True
        self.crop_rect.setTopLeft(event.pos())
        self.crop_rect.setBottomRight(event.pos())
        
    def mouse_move(self, event):
        if self.drawing:
            self.crop_rect.setBottomRight(event.pos())
            self.show_frame(self.current_frame)
            
    def mouse_release(self, event):
        self.drawing = False
        self.crop_rect = self.crop_rect.normalized()
        
    def convert_video(self):
        if not self.cap:
            QMessageBox.critical(self, "Error", "No video loaded")
            return
            
        # Conversion logic using self.start_frame, self.end_frame, and self.crop_rect
        # ... (similar to previous conversion code but using Qt features)
        
        QMessageBox.information(self, "Success", "Conversion completed")
        
if __name__ == "__main__":
    app = QApplication(sys.argv)
    window = VideoConverter()
    window.show()
    sys.exit(app.exec_())
